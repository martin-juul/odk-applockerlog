@{

    string version = typeof(AppLockerLog.Web.RouteConfig).Assembly.GetName().Version.ToString();
    string webApiEndPoint = System.Configuration.ConfigurationManager.AppSettings["WebApiEndPoint"].ToString();

    string currentRoute = "/";

    foreach (string key in HttpContext.Current.Request.QueryString.AllKeys)
    {
        if (key == "CurrentRoute")
        {
            currentRoute = HttpContext.Current.Request.QueryString[key];
            break;
        }
    }

    string runMode = AppLockerLog.Web.Properties.Settings.Default.RunMode;

    IEnumerable<string> fileEntries = Enumerable.Empty<string>();
    List<string> bundles = new List<string>();


    if (runMode == "WEBAPI")
    {
        Response.Write("running web api mode");

    }
    else
    {

        fileEntries = Directory.EnumerateFiles(Server.MapPath("~/dist"));

        bundles.Add("inline.");
        bundles.Add("polyfills");
        bundles.Add("styles.");
        bundles.Add("vendor.");
        bundles.Add("main.");
    }

}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta charset="utf-8">
    <title>AppLockerLog</title>
    <link rel="icon" type="image/x-icon" href="~/dist/favicon.ico">

    @if (true /*!HttpContext.Current.IsDebuggingEnabled*/)
    {
        foreach (string bundleName in bundles)
        {
            foreach (string fileName in fileEntries)
            {
                FileInfo fileInformation = new FileInfo(fileName);
                if (fileInformation.Name.Contains(bundleName)
                    && fileInformation.Extension.Contains(".css") == true)
                {
                    <link rel="stylesheet" href="~/dist/@fileInformation.Name">
                }

            }
        }
    }

    <!--@if (HttpContext.Current.IsDebuggingEnabled)
    {
        <base href="/">
    }
    else
    {
        <base href="@System.Configuration.ConfigurationManager.AppSettings["DefaultPage"].ToString();/">
    }
    -->

    <base href="/">

    <script>
        history.pushState({}, null, "@currentRoute");
    </script>

</head>
<body>

    @RenderBody()

    @if (runMode == "WEBAPI")
    {
        return;
    }

    <app-root imagesDirectory="dist" webApiEndPoint="@webApiEndPoint">Loading @version</app-root>

    @if (false) //HttpContext.Current.IsDebuggingEnabled
    {

        <script src="~/dist/inline.bundle.js?v=@version"></script>
        <script src="~/dist/polyfills.bundle.js?v=@version"></script>
        <script src="~/dist/styles.bundle.js?v=@version"></script>
        <script src="~/dist/vendor.bundle.js?v=@version"></script>
        <script src="~/dist/main.bundle.js?v=@version"></script>
    }
    else
    {

        foreach (string bundleName in bundles)
        {
            foreach (string fileName in fileEntries)
            {
                FileInfo fileInformation = new FileInfo(fileName);
                if (fileInformation.Name.Contains(bundleName)
                    && fileInformation.Name.Contains(".map") == false
                    && fileInformation.Extension.Contains(".css") == false)
                {
                    <script src="~/dist/@fileInformation.Name"></script>
                }

            }
        }


    }

</body>
</html>
